using System;
using System.Collections.Generic;
using Formulario.Aplicacion.Consultas.Consultas;
using Formulario.Aplicacion.Consultas.Resultados;
using Infraestructura.Core.Comun.Dato;
using Infraestructura.Core.Comun.Presentacion;
using Pagos.Aplicacion.Consultas.Consultas;
using Pagos.Aplicacion.Consultas.Resultados;
using Pagos.Dominio.Modelo;

namespace Pagos.Dominio.IRepositorio
{
    public interface IPagosRepositorio
    {
        Resultado<BandejaPagosResultado> ObtenerPagosBandeja(BandejaPagosConsulta consulta);
        Resultado<BandejaPagosResultado> ObtenerPagosBandejaCompleta(BandejaPagosConsulta consulta);
        IEnumerable<BandejaPagosResultado> ObtenerPagosBandejaSinPaginacion(BandejaPagosConsulta consulta);
        IEnumerable<Convenio> ObtenerConvenios();
        IEnumerable<MontoDisponibleSimularLoteResultado> ConsultarMontosDisponibles(decimal montoLote);
        string ConfirmarLote(IList<int> prestamos, string nombreLote, int nroMontoDisponible, decimal monto, decimal comision, decimal iva, decimal idUser, int convenioId, decimal mesesGracia, decimal idTipoLote);
        string RegistrarConvenioLote(decimal idLote, int convenioId);
        IList<FormularioxLoteResultado> ObtenerFormulariosxLote(long idLote);
        IList<FormularioPrestamoResultado> ObtenerFormulariosPrestamo(decimal idPrestamo);
        Resultado<BandejaLotesResultado> ObtenerBandejaLotes(BandejaLotesConsulta consulta);
        string ObtenerTotalizadorLotes(BandejaLotesConsulta consulta);
        string LiberarLote(decimal idLote, decimal idUsuario);
        PermiteLiberarLoteResultado PermiteLiberarLote(decimal idLote);
        string ValidarProvidenciaLote(decimal idLote);
        DetalleLoteResultado ObtenerCabeceraDetalleLote(decimal idLote);
        bool ValidarLotePago(decimal idLote);
        Resultado<BandejaPagosResultado> ObtenerPrestamosDetalleLote(PrestamosDetalleLoteConsulta idLote);
        IList<HistorialLoteResultado> ObtenerHistorialDetalleLote(decimal idLote);
        string DesagruparLote(decimal idLote, IList<int> idPrestamosDesagrupar, decimal usuario);
        IList<FilaExcelBanco> ObtenerDatosExcelBanco(decimal idLote, decimal idUsuario);
        decimal RegistrarChequeLote(decimal idLote, decimal idUsuario);
        Resultado<GrillaPlanPagosResultado> ConsultaFormulariosFiltrosEnLote(FiltrosFormularioConsulta consulta);
        IList<GrillaPlanPagosResultado> ConsultaIdsFormulariosFiltrosEnLote(FiltrosFormularioConsulta consulta);
        IEnumerable<PeriodoPlanPagoComboResultado> ObtenerPeriodosDePlanDePagos();
        bool ActualizarPlanPagos(string idsFormularios, int mesesDeGracia, DateTime? fechaPago, decimal idUsuario);
        IList<DetallePlanDePagoGrillaResultado> ObtenerDetallesPlanPagosFormulario(string idsFormularios);
        DatosNotaPago ObtenerDatosNota(decimal idLote);
        Resultado<BandejaFormulariosSuafResultado> ObtenerBandejaFormulariosSuaf(BandejaFormulariosSuafConsulta consulta);
        Resultado<BandejaFormulariosSuafResultado> ObtenerBandejaFormulariosSuafSeleccionarTodos(BandejaFormulariosSuafConsulta consulta);
        Id RegistrarLoteSuaf(IList<int> prestamos, string nroLote, decimal usuario);
        IList<FilaExcelSuaf> GenerarExcelSuaf(decimal nroLote);
        IList<BandejaLotesResultado> ObtenerBandejaLotesCompleto(BandejaLotesConsulta consulta);
        bool ValidarLoteSuafPorNumeroFormulario(Id idFormulario, Id idLote);
        void ActualizarEstadosPrestamos(Id idLote, Id idUsuario);
        Resultado<BandejaSuafResultado> ObtenerBandejaSuaf(BandejaSuafConsulta consulta);
        string ObtenerTotalizadorSuaf(BandejaSuafConsulta consulta);
        IEnumerable<ComboLotesResultado> ObtenerLotesSuaf();
        IEnumerable<ComboTiposPagoResultado> ObtenerTipoPago();
        bool CargaDevengado(decimal nroFormulario, string devengado, DateTime fecha, decimal usuario);
        bool BorrarDevengado(decimal nroFormulario, decimal usuario);
        bool RegistrarFechaPagoFormularios(string idAgrupamiento, DateTime fechaPago, DateTime fechaFinPago, int modalidad, int elemento, decimal usuario);
        IList<ComboLotesResultado> ObtenerModalidadesPago();
        IList<ComboLotesResultado> ObtenerElementosPago();
        IList<Convenio> ObtenerConveniosPago();
        bool ActualizarModalidadPago(decimal idLote, DateTime fechaPago, DateTime fechaFinPago, int modalidad, int elemento, int meses, bool actualiza, decimal usuario);
        string ConfirmarLoteAdenda(int idLoteSuaf, string nombreLote, int nroMontoDisponible, decimal monto, decimal comision, decimal iva, decimal idUser, int convenioId, decimal mesesGracia, decimal idTipoLote);
        Resultado<BandejaAdendaResultado> ObtenerBandejaAdenda(BandejaAdendaConsulta consulta);
        IList<BandejaAdendaResultado> ObtenerPrestamosCompletosParaAdenda(BandejaAdendaConsulta consulta);
        Resultado<FormulariosSeleccionadosAdendaResultado> ObtenerFormulariosParaAdenda(FormulariosSeleccionadosAdendaConsulta consulta);
        decimal AgregarPrestamoAdenda(DetallesAdenda detalle, string idUser);
        decimal QuitarPrestamoAdenda(DetallesAdenda detalle);
        bool RegistrarFechaPagoFormulariosAdenda(int idLoteSuaf, DateTime fechaPago, DateTime fechaFinPago, int modalidad, int elemento, decimal usuario);
        IList<BandejaPagosResultado> ObtenerPrestamos(decimal idLote);
        IList<BandejaPagosResultado> ObtenerDatosLote(decimal idLote);
        DatosFechaFormResultado ObtenerFechaInicioFormulario(int idFormulario);
        IList<FormularioFiltradoResultado> ConsultaDatosFormulario(int idFormulario);
        decimal ObtenerAgrupId(int idFormulario);
        IList<AgruparFormulario> ObtenerListaForms(int idAgrupamiento);
        decimal ObtenerTotalLote(decimal idLoteSuaf);
        bool HabilitadoAdenda(decimal idLoteSuaf);
        FormularioFechaPagoResultado ObtenerFormularioFechaPago(decimal idFormulario);
        IList<FormularioFechaPagoResultado> ObtenerFechasFormularioLote(decimal idLote);
        IList<FilaExcelActivacionMasiva> DatosExcelActivacionMasiva(decimal nroLote);
        IList<ComboLotesResultado> ObtenerComboLotes(decimal? tipoLote);
        IList<ReporteCuadroCreditosResultado> ObtenerExcelCuadroCreditos(InformePagosConsulta comando);
        IList<ReporteCuadroPagados> ObtenerExcelCuadroPagados(InformePagosConsulta comando, bool esHistorico);
        IList<ReporteHistoricoPagados> ObtenerExcelHistoricoPagados(InformePagosConsulta comando, bool esHistorico);
        IList<ExportacionPrestamo> ObtenerExportacionPrestamos(InformePagosConsulta comando);
        IList<ExportacionRecupero> ObtenerExportacionRecupero(InformePagosConsulta comando);
        int RegistrarProceshoBatch(string txSp, string idUsuario, int tipoProcesoBatch, int nroGrupo);
        bool RegistrarDetallesProcesoBatch(int nroGrupo, string listadoFormularios, string idUsuario);
        DatosBasicosFormularioResultado ObtenerSolicitante(int idFormulario);
        IList<LineaAdendaResultado> ObtenerLineasAdenda(decimal nroDetalle);
        bool GenerarAdenda(decimal nroDetalle, string comando, decimal usuario);
        Resultado<BandejaCambioEstadoResultado> ConsultarBandejaCambioEstado(BandejaCambioEstadoConsulta consulta);
        string ObtenerTotalizadorCambioEstado(BandejaCambioEstadoConsulta consulta);
        bool CambiarEstadoFormulario(decimal idFormulario, Id idUsuario);
        Resultado<FormularioChequeGrillaResultado> ObtenerBandejaCheques(FormularioGrillaChequeConsulta consulta, decimal usuario);
        string ConsultaTotalizadorCheques(FormularioGrillaChequeConsulta consulta, decimal usuario);
        bool ActualizarDatosCheque(decimal idFormulario, string nroCheque, DateTime? fechaVencimientoCheque, decimal usuario);
        string AgregarPrestamoLote(decimal idLote, string idsPrestamo, decimal idMontoDisponible, decimal monto, decimal usuario);
    }
}
